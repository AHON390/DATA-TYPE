'''
from abc import ABC,abstractmethod
class bankaccount(ABC):
    def __init__(self,account_holder,balance=0):
        self.account_holder=account_holder
        self.balance=balance
    def show_balance(self):
        print(f"{self.account_holder}'s balance ${self.balance}")
    abstractmethod
    def withdraw(self,amount):
        raise notimpleentederror('withdraw method must be implemented')
    def deposite(self,amount):
        raise notimplementedrror('deposite method must be implemeted')
class savingsAccount(bankaccount):
    def withdraw(self,amount):
        if amount<=self.balance:
            self.balance=self.balance-amount
            print(f'[savings] withdraw ${amount}')
        else:
            print(f'[savings] insufficient funds')
    def deposite(self,amount):
        self.balance=self.balance+amount
        print(f'[savings] deposited ${amount}')
def perform_transactions(account:bankaccount):
    account.deposite(1000)
    account.withdraw(1000)
    account.show_balance()
saving=savingsAccount("ahon",5000)
perform_transactions(saving)
print("------------------")
'''
class india():
    def capital(self):
        print("delhi is capital of india")
    def language(self):
        print("hindi is languge of india")
    def type(self):
        print('india is devoloping country')
class USA():
    def capital(self):
        print('washington,d.c is the capital pf USA')
    def language(self):
        print('English is the primary language of USA')
    def type(self):
        print('USA is devoloped country')
obj_ind=india()
obj_usa=USA()
for country in (obj_ind,obj_usa):
    country.capital()
    country.language()
    country.type()
